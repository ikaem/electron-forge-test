import {
  app,
  BrowserWindow,
  contextBridge,
  Dialog,
  dialog,
  ipcMain,
  ipcRenderer,
} from 'electron';
import fs from 'fs';
import { resolve, join } from 'path';
import { buttonContextMenu } from './menus/button-context-menu';
import { contextMenu } from './menus/context-menu';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const getFilename = () => {
  return `${app.getPath('userData')}/content.txt`;
};

const loadContent = () => {
  const fileName = getFilename();
  return fs.existsSync(fileName) ? fs.readFileSync(fileName, 'utf8') : '';
};

const saveContent = (content: string) => {
  const fileName = getFilename();
  fs.writeFileSync(fileName, content, 'utf8');
};

const createWindow = (): void => {
  console.log('path', app.getPath('userData'));
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    // this is title even if html has title
    title: 'Overriding html file title',
    height: 600,
    width: 800,
    webPreferences: {
      // preload: resolve(join(__dirname, 'preload.ts')),
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    // frame: false,

    show: false,
  });

  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
    mainWindow.focus();
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  // TODO these dont work
  // mainWindow.removeMenu();
  // mainWindow.setMenu(null);

  // secondary window
  // const secondaryWindow = new BrowserWindow({
  //   parent: mainWindow,
  //   modal: true,
  //   show: false,
  // });

  // // secondaryWindow.show();
  // secondaryWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // secondaryWindow.once('ready-to-show', secondaryWindow.show);

  // handling dialog requests with ipc
  // method is args really
  // events could be constants or enums somewhere, for reuse
  // method not really needed in this way

  // some preloader - to bridge the rendered to the main and let it talk to each other
  // contextBridge.exposeInMainWorld('electron', {
  //   // any for now
  //   showOpenDialog: (method: string, config: any) =>
  //     ipcRenderer.invoke('show-open-dialog', method, config),
  // });

  // context
  mainWindow.webContents.on('context-menu', () => {
    contextMenu.popup({
      window: mainWindow,
    });
  });
};

console.log('what', contextBridge);

ipcMain.on('show-open-dialog', (e, method: string, params: any) => {
  // dialog[method as any](params);
  // dialog.showCertificateTrustDialog

  // dialog[method](params);
  dialog.showOpenDialog(params);
});

ipcMain.on('show-message-box-dialog', (e, params: any) => {
  dialog.showMessageBox(params);
});

ipcMain.on('show-button-context-menu', (e, params: any) => {
  buttonContextMenu.popup({
    // window: mainWindow,
  });

  e.reply('response', 'what is up');
});

// maybe no need to listen for the event all the time
// ipcMain.on('get-current-app-path', (e) => {
//   e.reply('current-app-path', __dirname);
//   // e.sender.send('current-app-path', __dirname);
// });

ipcMain.handle('get-current-app-path', (e) => {
  return __dirname;
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.on('save-content', (e, content) => {
  saveContent(content);
});

// ok, so if we need response, better to do handles?
ipcMain.handle('load-content', (e) => {
  return loadContent();
});

// console.log(MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY);

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
